---
interface Props {
  text: string;
  href?: string;
  variant?: 'primary' | 'secondary';
  class?: string;
}

const { text, href, variant = 'primary', class: className = '' } = Astro.props;
---

<button 
  class={`px-6 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 ${
    variant === 'primary' 
      ? 'bg-gradient-to-r from-blue-600 to-blue-700 text-white hover:from-blue-700 hover:to-blue-800 shadow-lg hover:shadow-xl' 
      : 'border border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white'
  } ${className}`}
  data-interactive-button
>
  {text}
</button>

<script>
  // Simple interactive functionality
  document.querySelectorAll('[data-interactive-button]').forEach(button => {
    button.addEventListener('click', (e) => {
      // Add a ripple effect
      const ripple = document.createElement('span');
      const rect = button.getBoundingClientRect();
      const size = Math.max(rect.width, rect.height);
      const x = e.clientX - rect.left - size / 2;
      const y = e.clientY - rect.top - size / 2;

      ripple.style.width = ripple.style.height = size + 'px';
      ripple.style.left = x + 'px';
      ripple.style.top = y + 'px';
      ripple.style.position = 'absolute';
      ripple.style.borderRadius = '50%';
      ripple.style.background = 'rgba(255, 255, 255, 0.3)';
      ripple.style.transform = 'scale(0)';
      ripple.style.animation = 'ripple 0.6s linear';
      ripple.style.pointerEvents = 'none';

      button.style.position = 'relative';
      button.style.overflow = 'hidden';
      button.appendChild(ripple);

      setTimeout(() => {
        ripple.remove();
      }, 600);
    });
  });
</script>

<style>
  @keyframes ripple {
    to {
      transform: scale(4);
      opacity: 0;
    }
  }
</style> 