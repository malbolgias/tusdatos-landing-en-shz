---
// This component will be interactive on the client side
---

<form class="space-y-6 contact-form" id="contactForm">
  <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
    <div>
      <label for="firstName" class="block text-sm font-medium text-gray-700 mb-2">First Name *</label>
      <input 
        type="text" 
        id="firstName" 
        name="firstName" 
        required
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
        placeholder="Enter your first name"
      >
      <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
    </div>
    
    <div>
      <label for="lastName" class="block text-sm font-medium text-gray-700 mb-2">Last Name *</label>
      <input 
        type="text" 
        id="lastName" 
        name="lastName" 
        required
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
        placeholder="Enter your last name"
      >
      <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
    </div>
  </div>

  <div>
    <label for="email" class="block text-sm font-medium text-gray-700 mb-2">Email Address *</label>
    <input 
      type="email" 
      id="email" 
      name="email" 
      required
      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
      placeholder="Enter your email address"
    >
    <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
  </div>

  <div>
    <label for="company" class="block text-sm font-medium text-gray-700 mb-2">Company</label>
    <input 
      type="text" 
      id="company" 
      name="company"
      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
      placeholder="Enter your company name"
    >
  </div>

  <div>
    <label for="service" class="block text-sm font-medium text-gray-700 mb-2">Service of Interest</label>
    <select 
      id="service" 
      name="service"
      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300"
    >
      <option value="">Select a service</option>
      <option value="background-checks">Background Checks</option>
      <option value="sanctions-screening">Sanction list screening</option>
      <option value="compliance-services">Compliance Services</option>
      <option value="empresas-platform">Tusdatos Empresas Platform</option>
    </select>
  </div>

  <div>
    <label for="message" class="block text-sm font-medium text-gray-700 mb-2">Message *</label>
    <textarea 
      id="message" 
      name="message" 
      rows="4"
      required
      class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-300 resize-none"
      placeholder="Tell us about your needs..."
    ></textarea>
    <div class="error-message text-red-500 text-sm mt-1 hidden"></div>
  </div>

  <div class="flex items-center">
    <input 
      type="checkbox" 
      id="privacy" 
      name="privacy" 
      required
      class="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
    >
    <label for="privacy" class="ml-2 text-sm text-gray-700">
      I agree to the <a href="/privacy" class="text-blue-600 hover:text-blue-700">Privacy Policy</a> and <a href="/terms" class="text-blue-600 hover:text-blue-700">Terms of Service</a>
    </label>
  </div>

  <button 
    type="submit" 
    class="w-full bg-gradient-to-r from-blue-600 to-blue-700 text-white py-3 px-6 rounded-lg font-semibold hover:from-blue-700 hover:to-blue-800 transition-all duration-300 transform hover:scale-105 shadow-lg btn-animate btn-ripple"
  >
    <span class="submit-text">Send Message</span>
    <span class="loading-text hidden">Sending...</span>
  </button>

  <div class="success-message bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded-lg hidden">
    Thank you! Your message has been sent successfully. We'll get back to you soon.
  </div>

  <div class="error-message bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg hidden">
    There was an error sending your message. Please try again.
  </div>
</form>

<script>
  class ContactForm {
    constructor(form) {
      this.form = form;
      this.submitButton = form.querySelector('button[type="submit"]');
      this.submitText = form.querySelector('.submit-text');
      this.loadingText = form.querySelector('.loading-text');
      this.successMessage = form.querySelector('.success-message');
      this.errorMessage = form.querySelector('.error-message');
      this.init();
    }

    init() {
      this.form.addEventListener('submit', (e) => this.handleSubmit(e));
      this.setupValidation();
    }

    setupValidation() {
      const inputs = this.form.querySelectorAll('input[required], textarea[required]');
      inputs.forEach(input => {
        input.addEventListener('blur', () => this.validateField(input));
        input.addEventListener('input', () => this.clearFieldError(input));
      });
    }

    validateField(field) {
      const errorElement = field.parentElement.querySelector('.error-message');
      let isValid = true;
      let errorMessage = '';

      if (field.type === 'email') {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(field.value)) {
          isValid = false;
          errorMessage = 'Please enter a valid email address';
        }
      }

      if (field.required && !field.value.trim()) {
        isValid = false;
        errorMessage = 'This field is required';
      }

      if (!isValid) {
        this.showFieldError(field, errorMessage);
      } else {
        this.clearFieldError(field);
      }

      return isValid;
    }

    showFieldError(field, message) {
      const errorElement = field.parentElement.querySelector('.error-message');
      errorElement.textContent = message;
      errorElement.classList.remove('hidden');
      field.classList.add('border-red-500');
    }

    clearFieldError(field) {
      const errorElement = field.parentElement.querySelector('.error-message');
      errorElement.classList.add('hidden');
      field.classList.remove('border-red-500');
    }

    validateForm() {
      const requiredFields = this.form.querySelectorAll('input[required], textarea[required]');
      let isValid = true;

      requiredFields.forEach(field => {
        if (!this.validateField(field)) {
          isValid = false;
        }
      });

      return isValid;
    }

    async handleSubmit(e) {
      e.preventDefault();

      if (!this.validateForm()) {
        return;
      }

      this.setLoading(true);

      try {
        // Simulate form submission
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        this.showSuccess();
        this.form.reset();
      } catch (error) {
        this.showError();
      } finally {
        this.setLoading(false);
      }
    }

    setLoading(loading) {
      if (loading) {
        this.submitButton.disabled = true;
        this.submitText.classList.add('hidden');
        this.loadingText.classList.remove('hidden');
      } else {
        this.submitButton.disabled = false;
        this.submitText.classList.remove('hidden');
        this.loadingText.classList.add('hidden');
      }
    }

    showSuccess() {
      this.successMessage.classList.remove('hidden');
      this.errorMessage.classList.add('hidden');
      
      setTimeout(() => {
        this.successMessage.classList.add('hidden');
      }, 5000);
    }

    showError() {
      this.errorMessage.classList.remove('hidden');
      this.successMessage.classList.add('hidden');
      
      setTimeout(() => {
        this.errorMessage.classList.add('hidden');
      }, 5000);
    }
  }

  // Initialize contact forms
  document.querySelectorAll('.contact-form').forEach(form => {
    new ContactForm(form);
  });
</script> 